"""===========================
pipeline_classifyreads.py
===========================

Overview
========

This pipeline takes raw fastq files and taxonomically classifies them. It also estimates abundance.
files :file:``pipeline.yml` and :file:`conf.py`.

Usage
=====

See :ref:`PipelineSettingUp` and :ref:`PipelineRunning` on general
information how to use cgat pipelines.

Configuration
-------------

The pipeline requires a configured :file:`pipeline.yml` file.

Default configuration files can be generated by executing:

   python <srcdir>/pipeline_classifyreads.py config

Input files
-----------

fastq files that are in the format .fastq.1.gz and .fastq.2.gz.

Requirements
------------


Requirements:


Pipeline output
===============


Glossary
========

.. glossary::


Code
====

"""
import sys
import os
import glob
from pathlib import Path
from ruffus import *
from cgatcore import pipeline as P

# load options from the config file
PARAMS = P.get_parameters(
    ["pipeline.yml"])

#get all files within the directory to process
SEQUENCEFILES = ("*.fastq.1.gz")

SEQUENCEFILES_REGEX = regex(
    r"(\S+).(fastq.1.gz)")

scriptsdir = os.path.dirname(os.path.abspath(__file__))
scriptsdir = P.snip(scriptsdir, "pipelines") + "scripts"
PARAMS["scriptsdir"] = scriptsdir

########################################################
########################################################
########################################################
# Run kraken2 on raw reads
########################################################
########################################################
########################################################

@follows(mkdir("kraken2.dir"))
@transform(SEQUENCEFILES, SEQUENCEFILES_REGEX, r"kraken2.dir/\1.abundance.tsv.gz")
def classifyReadsWithKraken2(infile, outfile):
    '''classify reads with kraken2
    '''
    # Note that at the moment I only deal with paired-end
    # reads
    p1 = infile
    p2 = p1.replace(".fastq.1.gz", ".fastq.2.gz")

    prefix = P.snip(outfile, ".abundance.tsv.gz")
    
    db = PARAMS.get("kraken2_db")
    nthreads = PARAMS.get("kraken2_nthreads")
    job_mem = PARAMS.get("kraken2_job_mem" + "G")
    options = PARAMS.get("kraken2_options")
    statement = '''kraken2
                   --db %(db)s
                   --use-mpa-style
                   --output %(prefix)s.classified.tsv
                   --paired
                   --report %(prefix)s.abundance.tsv
                   --use-names
                   --threads %(nthreads)s
                   --gzip-compressed %(p1)s %(p2)s
                   %(options)s;
                   gzip %(prefix)s.classified.tsv %(prefix)s.abundance.tsv
                '''
    P.run(statement)

########################################################
########################################################
########################################################
# merge abundance files
########################################################
########################################################
########################################################

@merge(classifyReadsWithKraken2, "kraken2.dir/merged_abundances.tsv.gz")
def mergeKraken2(infiles, outfile):
    '''
    merge the results from kraken 2
    '''
    titles = ",".join([P.snip(x, ".abundance.tsv.gz") for x in glob.glob("kraken2.dir/*abundance.tsv.gz")])
    statement = '''cgat combine_tables
                   --glob=kraken2.dir/*abundance.tsv.gz
                   --headers=%(titles)s
                   --no-titles
                   -m 0
                   -c 1
                   --log=kraken2.dir/merged_abundances.log
                   | gzip >  %(outfile)s
                '''
    P.run(statement)


########################################################
########################################################
########################################################
# Parse kraken output
########################################################
########################################################
########################################################

@follows(mkdir("taxonomy_abundances.dir"))
@split(mergeKraken2, "taxonomy_abundances.dir/*.tsv.gz")
def buildTaxonomyAbundances(infile, outfiles):
    '''split the abundance file by taxonomic levels
    '''
    prefix = P.snip(os.path.basename(infile), ".tsv.gz")
    statement = '''zcat %(infile)s |
                  python %(scriptsdir)s/split_taxonomy_abundances.py
                  --outdir=taxonomy_abundances.dir
                  --prefix=%(prefix)s
                  --log=taxonomy_abundances.dir/%(prefix)s.log;
                  gzip taxonomy_abundances.dir/*.tsv
               '''
    P.run(statement)

# ---------------------------------------------------
# Generic pipeline tasks
@follows(buildTaxonomyAbundances)
def full():
    pass


def main(argv=None):
    if argv is None:
        argv = sys.argv
    P.main(argv)


if __name__ == "__main__":
    sys.exit(P.main(sys.argv))    

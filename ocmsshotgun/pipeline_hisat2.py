"""
================================
Align sequences with hisat2
================================


Overview
========

This pipeline is a wrapper for running hisat2. Accepts both paired end and 
single end reads


Configuration
=============
The pipeline requires a configured :file:`pipeline.yml` file.

Default configuration files can be generated by executing:
    
    ocms_shotgun hisat2 config

Dependencies
============

HISAT2
SAMtools
BEDtools

source /well/kir/config/modules.sh
module load HISAT2/2.2.1-gompi-2022b
module load BEDTools/2.30.0-GCC-12.2.0
module load SAMtools/1.17-GCC-12.2.0

Code
====

"""

from ruffus import *
from cgatcore import pipeline as P
from cgatcore import iotools as IOTools

import os,sys,re

import ocmsshotgun.modules.Utility as utility
import ocmsshotgun.modules.PreProcess as pp

# set up params
PARAMS = P.get_parameters(["pipeline.yml"])

# check that input files correspond
indir = PARAMS.get("input.dir", "input.dir")
FASTQ1S = utility.check_input(indir, paired=False)

@follows(mkdir('hisat2.dir'))
@transform(FASTQ1S,
           regex(fr'{indir}/(\S+)(.fastq.*gz)'),
           r'hisat2.dir/\1\2')
def runHisat2(infile, outfile): 
    '''Align sequences with HISAT2 and converts sam to bam
    '''

    tool = pp.hisat2(infile, outfile, **PARAMS)

    statement = [tool.hisatStatement()]
    
    # sort sam output to bam output and index bam
    statement.append(tool.sam2bamStatement())
    
    statement = " ; ".join(statement)
    P.run(statement,
        job_threads = PARAMS["hisat2_job_threads"],
        job_memory = PARAMS["hisat2_job_memory"])
    
    # clean up sam files and hisat outputs
    statement = tool.postProcess()
    P.run(statement, without_cluster=True)

    # merging done locally
    tool.mergeHisatMetrics() 


@follows(runHisat2)
def full():
    pass

def main(argv=None):
    if argv is None:
        argv = sys.argv
    P.main(argv)


if __name__ == "__main__":
    sys.exit(P.main(sys.argv))  
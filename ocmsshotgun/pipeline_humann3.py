"""===========================
pipeline_humann.py
===========================

Overview
========

This pipeline uses humann3 to take raw fastq files and estimate taxonomic abundunce, then functionally profile the metagenome.
files :file:``pipeline.yml` and :file:`conf.py`.

Usage
=====

See :ref:`PipelineSettingUp` and :ref:`PipelineRunning` on general
information how to use cgat pipelines.

Configuration
-------------

The pipeline requires a configured :file:`pipeline.yml` file.

Default configuration files can be generated by executing:

   python <srcdir>/pipeline_humann.py config

Input files
-----------

Input files should be fastq.gz
Paired-end reads should be concatenated into one fastq.gz file. 
Can use concat_fastq.py for this -- paired end fastq files are 
in the format .fastq.1.gz and .fastq.2.gz.

Requirements
------------


Dependencies
============
Bowtie2
DIAMOND
R
Pandoc

module load Bowtie2/2.4.1-GCC-9.3.0
module load DIAMOND/0.9.36-GCC-9.3.0
module load R/4.0.0-foss-2020a
module load R-bundle-Bioconductor/3.11-foss-2020a-R-4.0.0
module load Pandoc/2.13

Pipeline output
===============


Glossary
========

.. glossary::


Code
====

"""
import sys
import os
import glob
import re
import subprocess
from pathlib import Path
from ruffus import *
from cgatcore import pipeline as P
import ocmsshotgun.modules.Humann3 as H

# load options from the config file
PARAMS = P.get_parameters(
    ["pipeline.yml"])

#get all files within the directory to process
SEQUENCEFILES = ("*fastq.gz")

SEQUENCEFILES_REGEX = regex(r"(\S+).(fastq.gz)")

########################################################
########################################################
########################################################
# Run humann3 on concatenated fastq.gz

# produces a humann3.dir which conatins
# a folder for each sample, which contains 
# pathcoverage, pathabundance and genefamilies files.
########################################################
########################################################
########################################################

@follows(mkdir("humann3.dir"))
@transform(SEQUENCEFILES, SEQUENCEFILES_REGEX, r"humann3.dir/\1/\1_pathcoverage.tsv.gz")
def runHumann3(infile, outfile):
    '''functional profile with humann3
    '''
    H.humann3.run(infile, outfile, **PARAMS)

########################################################
########################################################
########################################################
# merge Humann3 output files
########################################################
########################################################
########################################################
@follows(runHumann3)
@merge(runHumann3, "humann3.dir/merged_pathabundance.tsv")
def mergePathAbundance(infiles, outfile):
    '''
    merge the results from Humann3
    '''
    
    infiles_path = [re.sub("pathcoverage", "pathabundance", f) for f in infiles]
    outfiles_path = [os.path.abspath(f)[:-3] for f in infiles_path]
    infiles_path = [os.path.abspath(f) for f in infiles_path]
    infiles_path = " ".join(infiles_path)
    outfiles_path = " ".join(outfiles_path)

    # find infiles with glob because file order from glob 
    # is different from infiles found with ruffus
    infiles = glob.glob("humann3.dir/*/*_pathabundance.tsv.gz")
    samples = [P.snip(os.path.basename(x), "_pathabundance.tsv.gz") for x in infiles]
    titles = ",".join(samples)    
    statement = '''gunzip %(infiles_path)s;
                   cgat combine_tables
                   --glob=humann3.dir/*/*_pathabundance.tsv
                   --header-names=%(titles)s
                   -m 0
                   -c 1
                   --log=humann3.dir/merged_pathabundance.log
                   | sed '1s/bin/pathway/' >> %(outfile)s;
                   gzip %(outfiles_path)s 
                '''
    P.run(statement)

@merge(runHumann3, "humann3.dir/merged_pathcoverage.tsv")
def mergePathCoverage(infiles, outfile):
    '''
    merge the results from Humann3
    '''
    infiles_path = [os.path.abspath(f) for f in infiles]
    infiles_path = " ".join(infiles_path)
    outfiles_path = [os.path.abspath(f)[:-3] for f in infiles]
    outfiles_path = " ".join(outfiles_path)
    
# find infiles with glob because file order from glob 
    # is different from infiles found with ruffus
    infiles = glob.glob("humann3.dir/*/*_pathcoverage.tsv.gz")
    samples = [P.snip(os.path.basename(x), "_pathcoverage.tsv.gz") for x in infiles]
    titles = ",".join(samples)
    statement = '''gunzip %(infiles_path)s; 
                   cgat combine_tables
                   --glob=humann3.dir/*/*_pathcoverage.tsv
                   --header-names=%(titles)s
                   -m 0
                   -c 1
                   --log=humann3.dir/merged_pathcoverage.log
                   | sed '1s/bin/pathway/' >> %(outfile)s;
                   gzip %(outfiles_path)s
                '''
    P.run(statement)

@merge(runHumann3, "humann3.dir/merged_genefamilies.tsv")
def mergeGeneFamilies(infiles, outfile):
    '''
    merge the results from Humann3
    '''
    infiles_path = [re.sub("pathcoverage", "genefamilies", f) for f in infiles]
    outfiles_path = [os.path.abspath(f)[:-3] for f in infiles_path]
    infiles_path = [os.path.abspath(f) for f in infiles_path]
    infiles_path = " ".join(infiles_path)
    outfiles_path = " ".join(outfiles_path)
    
    # find infiles with glob because file order from glob 
    # is different from infiles found with ruffus
    infiles = glob.glob("humann3.dir/*/*_genefamilies.tsv.gz")   
    samples = [P.snip(os.path.basename(x), "_genefamilies.tsv.gz") for x in infiles]
    titles = ",".join(samples)
    statement = '''gunzip %(infiles_path)s; 
                   cgat combine_tables
                   --glob=humann3.dir/*/*_genefamilies.tsv
                   --header-names=%(titles)s
                   -m 0
                   -c 1
                   --log=humann3.dir/merged_genefamilies.log 
                   | sed '1s/bin/gene_family/' >> %(outfile)s;
                   gzip %(outfiles_path)s
                '''
    P.run(statement)

@merge(runHumann3, "humann3.dir/merged_metaphlan.tsv")
def mergeMetaphlan(infiles, outfile):
    '''
    merge metaphlan bugs list from Humann3 across samples
    '''
    infiles_path = [re.sub("pathcoverage", "metaphlan_bugs_list", f) for f in infiles]
    outfiles_path = [os.path.abspath(f)[:-3] for f in infiles_path]
    infiles_path = [os.path.abspath(f) for f in infiles_path]
    infiles_path = " ".join(infiles_path)
    outfiles_path = " ".join(outfiles_path)

    # find infiles with glob because file order from glob 
    # is different from infiles found with ruffus
    infiles = glob.glob("humann3.dir/*/*_metaphlan_bugs_list.tsv.gz")   
    samples = [P.snip(os.path.basename(x), "_metaphlan_bugs_list.tsv.gz") for x in infiles]
    # sed doesn't recognize \t as tab. need to double escape with \\
    titles = "\\t".join(samples)
    x = glob.glob("humann3.dir/*/*_metaphlan_bugs_list.tsv")

    statement = '''gunzip %(infiles_path)s;
                   cgat combine_tables
                   --glob=humann3.dir/*/*_metaphlan_bugs_list.tsv
                   --columns 1
                   --take 3
                   -m 0
                   --log=humann3.dir/merged_metaphlan.log 
                   | sed 1i"clade_name\\t%(titles)s" >> %(outfile)s;
                   gzip %(outfiles_path)s
                '''
    P.run(statement)

#####################################################
#####################################################
#####################################################
@split(mergeMetaphlan, "humann3.dir/merged_metaphlan_*.tsv")
def splitMetaphlan(infile, outfiles):
    '''split merged metaphlan file by taxonomic levels
    '''
    
    statement = '''ocms_shotgun split_metaphlan -i %(infile)s -o humann3.dir'''
    P.run(statement)

#####################################################
#####################################################
#####################################################
@follows("mergePathAbundance",
         "mergePathCoverage", 
         "mergeGeneFamilies",
         "splitMetaphlan",
         mkdir("report.dir"))
def build_report():
    '''
    render the rmarkdown report file
    '''
    reportdir = os.path.dirname(os.path.abspath(__file__))
    reportdir = os.path.join(reportdir, "pipeline_docs", "Rmd", "pipeline_humann3")
    reportfile = os.path.join(reportdir, "pipeline_humann3_report.Rmd")

    # copy report template to report.dir and render report
    statement = '''cd report.dir;
                   cp %(reportfile)s .;
                   R -e "rmarkdown::render('pipeline_humann3_report.Rmd', output_file='pipeline_humann3_report.html')";
                   cd ../
                '''
    P.run(statement)
# ---------------------------------------------------
# Generic pipeline tasks
@follows("runHumann3", "mergePathCoverage", "mergePathAbundance", "mergeGeneFamilies", "splitMetaphlan")
def full():
    pass


def main(argv=None):
    if argv is None:
        argv = sys.argv
    P.main(argv)


if __name__ == "__main__":
    sys.exit(P.main(sys.argv))    
